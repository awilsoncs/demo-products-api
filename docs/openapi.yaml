openapi: 3.0.0
info:
  title: Inventory Management API
  version: 1.0.0
  description: API for managing users and products in the inventory management system.

paths:
  /health:
    get:
      summary: Check the health of the API
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy

  /products:
    get:
      summary: Get a list of all products
      operationId: getProducts
      security:
        - cognitoAuth:
          - read-products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Add a new product
      operationId: addProduct
      security:
        - cognitoAuth:
          - write-products
      requestBody:
        description: Product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product added successfully.

  /products/{productId}:
    get:
      summary: Get details of a specific product
      operationId: getProduct
      security:
        - cognitoAuth:
          - read-products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    put:
      summary: Update a product by ID
      operationId: updateProduct
      security:
        - cognitoAuth:
          - write-products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

      responses:
        '200':
          description: Product updated successfully

    delete:
      summary: Delete a product by ID
      operationId: deleteProduct
      security:
        - cognitoAuth:
          - write
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully

components:
  securitySchemes:
    cognitoAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://YOUR-COGNITO-DOMAIN.auth.us-east-1.amazoncognito.com/oauth2/authorize
          tokenUrl: https://YOUR-COGNITO-DOMAIN.auth.us-east-1.amazoncognito.com/oauth2/token
          scopes:
            read-products: "Read access to product data"
            write-products: "Write access to product data"
            read-users: "Read access to user data"
            write-users: "Write access to user data"

  schemas:
    Product:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: UUID of the product
        name:
          type: string
          description: Name of the product
        price:
          type: number
          description: Price of the product in USD micros
        description:
          type: string
          description: Description of the product
        quantity:
          type: integer
          description: Quantity of the product in stock
      required:
        - name
        - price
        - quantity
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: UUID of the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: hashed password
          description: Hashed password of the user
      required:
        - email

    LoginUser:
      type: object
      description: User login and signup details
      properties:
        username:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: hashed password
          description: Hashed password of the user
      required:
        - username
        - password

security:
  - cognitoAuth:
      - read-products
